** instead of using an application.min.js and application.min.css, allow the option to inline everything on the page 

not a good idea for sites, a very good idea for single-page apps

** use the connect.compress middleware (gzip/deflate) for our server

** optional gzipping of html, css and JavaScript

You choose whether these files retain their original extensions or get .gz appended, and you choose whether to keep the uncompressed build or to do away with uncompressed files

For S3, you'll want to retain original extensions and throw away uncompressed variants (which does mean you lose support for very old browsers), and you need to pass on the `Content-Encoding: gzip` header to clients.

For NGINX, you'll want to add `gzip_static on;` to your config, retain originals and append .gz.

(Note that decompression of heavily gzipped files takes about the same amount of time as it does for lightly gzipped files or even less, so it makes sense to always use gzip 9 when compressing on build.)

- update to express 3.0 once it's on npm

- use pngcrush when available and when writing to a file-based bundle

(Node.js, through Buffers, has good support for binary data, so we could support this for mem-based bundles too. The only caveat would be that if we start loading every file in a bundle into memory, that could lead to trouble for websites that have lots of binary data -- not just large websites, but even small websites with lots of images. So perhaps, if people want this sort of functionality for a mem-based bundle, they could write the bundle to a temporary location and then serve it with express.static)
